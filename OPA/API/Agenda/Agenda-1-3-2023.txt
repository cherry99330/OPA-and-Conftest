OPA Session - 01/03/2023

Agenda:

1)What is OPA

OPA is a tool that allows you to define and enforce rules across an organizationâ€™s systems, applications,API and infrastructure. It provides a unified way of managing policies and making decisions based on those policies.
OPA was originally created by Styra
REF:https://www.openpolicyagent.org/docs/latest/

service -- request/query---opa ---decision

2)What is Rego

Rego is the policy language used by OPA and is designed to provide a simple and readable way to write rules and policies.Rego rules can be written to define the logic for specific policies, such as allowing or denying access to a resource
REF:https://www.openpolicyagent.org/docs/latest/policy-language/#what-is-rego

3)How to evaluate policy against the given input

command used : opa eval
We can use this command to evaluate Rego expressions and policies.

Commonly used flags include: 
    bundle(Load a bundle file or directory into OPA)
    data(Load policy or data files into OPA)
    input(Load a data file and use it as input) 
    format(Set the output format to use)

Note: bundle and data flag can be repeated but we cannot repeat input flag.
When running -  opa eval -d title.rego -i open.json -i openapi.json "data.title.allow", it only reads the last input file.

REF:https://www.openpolicyagent.org/docs/latest/cli/#opa-eval
----Demo--Sample folder----

4)How to test policy in OPA against test cases

command used : opa test
The opa test subcommand runs all of the tests (i.e., rules prefixed with test_) found in Rego files passed on the command line.

Results we get as output:
PASS: denotes a number of testcases passed out of all
FAIL: denotes a number of testcases failed out of all
SKIPPED: to skip a test case it should start with "todo_" . We will not see the result of this testcase
ERROR: If the test encounters a runtime error the test result is marked as an ERROR

commonly flags used:
. :The 'test' command takes a file or directory path as input and executes all test cases discovered in matching files. Test cases are rules whose names have the prefix "test_".
-v(--verbose ):set verbose reporting mode

REF:https://www.openpolicyagent.org/docs/latest/policy-testing/#getting-started
----Demo-- Sample-test folder----
5)What is policyset, How can we test a policyset

Policyset is a collection of different policies which are tested against a single input file.
To test a policyset:

Folder structure:
    input file
    bundle that contains all policies.
command to run : opa eval -b bundle.tar.gz --input openapi.json "data.sample1.allow"

---Demo policyset----
6)What is Conftest----lets continue this tomorrow

Conftest is a utility to help you write tests against structured configuration data.Conftest relies on the Rego language from Open Policy Agent for writing policies.
Conftest is designed to be integrated into a CI/CD pipeline, where it can validate configuration files before they are deployed to production.
https://www.conftest.dev/

7)Difference between OPA and Conftest

OPA is a general-purpose policy engine that can enforce policies across various domains, Conftest is a configuration validation tool that uses OPA's Rego language to test and enforce policies for configuration files. 
OPA can be deployed in various ways and integrated with various systems, while Conftest is a command-line tool primarily used for local testing and integration with CI/CD pipelines.

8)How to test policy in Conftest against given input file
Policies by default should be placed in a directory called policy, but this can be overridden with the --policy flag.

1st way:
command to run : conftest test -p title.rego openapi.json
Here we are overridding the policy folder with -p.

2nd way:
command to run : conftest test openapi.json
Here all the policies under the policy folder are being tested against the input openapi.json
If we use this approach all the policies related to a particular service/api will be in one place. Easy to manage and locate policies as well.

By default, Conftest looks for these rules in the main namespace, but this can be overriden with the --namespace flag or provided in the configuration file. To look in all namespaces, use the --all-namespaces flag.
EX: 
conftest test -p title.rego openapi.json --all-namespaces :---to check in all the packages present
conftest test -p title.rego openapi.json -n <package_name> :-- to check in a specific package other than main
REF : https://www.conftest.dev/
---Demo trial & trial1-json----

9)How to test/verfiy policy against unit test cases

To test the policies we can use conftest verify to execute them and report on the results.
command to use: conftest verify
When we write conftest verify, it locates policy folder and under that runs test.rego file.
Here as well,Policies by default should be placed in a directory called policy, but this can be overridden with the --policy flag.
EX:conftest verify --policy .\title_test.rego --policy .\title.rego --policy .\input.rego  
conftest verify --output json 
REF: https://www.conftest.dev/
--- Demo trial2-conftest-policy & trial2-conftest---